<!-- views/subscription.ejs (Enhanced with decimal precision support) -->
<!DOCTYPE html>
<html>
<head>
  <title>Subscription Plans | Virelia</title>
  <link rel="icon" type="image/x-icon" href="/images/loga.ico">
  <link rel="stylesheet" href="/style.css">
  <link rel="stylesheet" href="/css/subscription.css">
  <link rel="stylesheet" href="/css/header.css">
  <link rel="stylesheet" href="/css/footer.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Minecraft&family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
</head>
<body>
  <!-- Header -->
  <header class="header">
    <nav class="navbar">
        <div class="nav-container">
            <div class="nav-logo">
                <img src="/images/logo.png" alt="Virelia Logo">
                <span>Virelia</span>
            </div>
            <ul class="nav-menu">
                <li><a href="https://virelia.live/">Home</a></li>
                <!-- <li><a href="/about">About</a></li> -->
                <li><a href="https://virelia.live/guide">Guides</a></li>
                <li><a href="https://virelia.live/contact">Contact</a></li>
                <li><a href="http://localhost:3000/minecraft/subscription">Marketplace</a></li>
                <li><a href="/profile">Profile</a></li>
                <li><a href="/auth/logout">Logout</a></li>
            </ul>
            <div class="nav-toggle">
                <i class="fas fa-bars"></i>
            </div>
        </div>
    </nav>
  </header>

  <!-- Main Content -->
  <main class="main-content">
    <div class="subscription-container">
      <h1></h1>
      <h1>Subscription Plans</h1>
      
      <div class="balance-info">
        <h3>Your VV Balance</h3>
        <div class="balance-amount">
          <span class="decimal-highlight"><%
            // Format balance with proper decimals
            let formattedBalance;
            if (user.vv_balance < 1 && user.vv_balance > 0) {
              formattedBalance = parseFloat(user.vv_balance).toFixed(8).replace(/\.?0+$/, '');
            } else if (user.vv_balance >= 1000) {
              formattedBalance = user.vv_balance.toLocaleString('en-US', {
                minimumFractionDigits: 0,
                maximumFractionDigits: 8
              });
            } else {
              formattedBalance = parseFloat(user.vv_balance).toFixed(6).replace(/\.?0+$/, '');
            }
          %><%= formattedBalance %></span> 
          <span class="price-unit">VV</span>
        </div>
        <div class="balance-breakdown">
          <% if (user.vv_balance < 1 && user.vv_balance > 0) { %>
            Micro balance • Perfect for small transactions
          <% } else if (user.vv_balance >= 1000) { %>
            Premium balance • <%= (user.vv_balance / 1000).toFixed(1) %>K VV available
          <% } else { %>
            Standard balance • Ready for purchases
          <% } %>
        </div>
      </div>
      
      <div class="plans-grid">
        <% plans.forEach(plan => { 
          // Calculate formatted prices
          let finalPriceFormatted, originalPriceFormatted;
          
          if (plan.final_price < 1 && plan.final_price > 0) {
            finalPriceFormatted = parseFloat(plan.final_price).toFixed(8).replace(/\.?0+$/, '');
          } else {
            finalPriceFormatted = parseFloat(plan.final_price).toFixed(6).replace(/\.?0+$/, '');
          }
          
          if (plan.price_vv < 1 && plan.price_vv > 0) {
            originalPriceFormatted = parseFloat(plan.price_vv).toFixed(8).replace(/\.?0+$/, '');
          } else {
            originalPriceFormatted = parseFloat(plan.price_vv).toFixed(6).replace(/\.?0+$/, '');
          }

          const isAffordable = user.vv_balance >= plan.final_price;
        %>
          <div class="plan-card <%= !isAffordable ? 'insufficient-funds' : '' %>">
            <% if (plan.discount_amount > 0) { %>
              <div class="discount-badge">
                <% if (plan.discount.type === 'percent') { %>
                  <%= plan.discount.value %>% OFF
                <% } else { %>
                  <%= parseFloat(plan.discount_amount).toFixed(6).replace(/\.?0+$/, '') %> VV OFF
                <% } %>
              </div>
            <% } %>
            
            <img src="<%= plan.profile_image %>" alt="<%= plan.title %>" class="plan-image" onerror="this.src='/default-plan.png'">
            
            <div class="plan-title"><%= plan.title %></div>
            <div class="plan-description"><%= plan.description %></div>
            
            <div class="duration"><%= plan.duration_text %></div>
            
            <div class="pricing-section">
              <% if (plan.discount_amount > 0) { %>
                <div class="original-price"><%= originalPriceFormatted %> <span class="price-unit">VV</span></div>
              <% } %>
              <div class="final-price">
                <span class="decimal-highlight"><%= finalPriceFormatted %></span> 
                <span class="price-unit">VV</span>
              </div>
              
              <% if (plan.discount_amount > 0) { %>
                <div class="savings-info">
                  Save <%= parseFloat(plan.discount_amount).toFixed(8).replace(/\.?0+$/, '') %> VV!
                </div>
              <% } %>
            </div>

            <div class="price-comparison">
              <% if (plan.final_price < 0.001) { %>
                <strong>Micro-transaction:</strong> Ultra low cost
              <% } else if (plan.final_price < 0.01) { %>
                <strong>Mini Plan:</strong> Great for trying out
              <% } else if (plan.final_price >= 1) { %>
                <strong>Premium Plan:</strong> Best value for extended use
              <% } else { %>
                <strong>Standard Plan:</strong> Perfect balance of cost and duration
              <% } %>
              
              <% if (plan.days > 1) { %>
                <br>Cost per day: <strong><%= (plan.final_price / plan.days).toFixed(8).replace(/\.?0+$/, '') %> VV</strong>
              <% } %>
            </div>
            
            <button class="purchase-btn" 
                    onclick="purchasePlan('<%= plan.id %>', this)"
                    <%= !isAffordable ? 'disabled' : '' %>>
              <% if (!isAffordable) { %>
                Insufficient Funds (Need <%= (plan.final_price - user.vv_balance).toFixed(8).replace(/\.?0+$/, '') %> more VV)
              <% } else { %>
                Purchase for <%= finalPriceFormatted %> VV
              <% } %>
            </button>
            
            <div class="loading">Processing purchase...</div>
          </div>
        <% }); %>
      </div>

  <!-- Footer -->
    <%- include('partials/footer') %>

     <!-- Load protection script at the end of body -->
    <script src="/js/inspect-protection.js"></script>
  <script>
    function generateIdempotencyKey() {
      return 'idem_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }
    
    // Enhanced formatting function for client-side
    function formatVV(amount, maxDecimals = 8) {
      if (typeof amount !== 'number') {
        amount = parseFloat(amount) || 0;
      }
      
      if (amount < 1 && amount > 0) {
        return amount.toFixed(maxDecimals).replace(/\.?0+$/, '');
      } else if (amount >= 1000) {
        return amount.toLocaleString('en-US', {
          minimumFractionDigits: 0,
          maximumFractionDigits: maxDecimals
        });
      } else {
        return amount.toFixed(6).replace(/\.?0+$/, '');
      }
    }
    
    async function purchasePlan(planId, button) {
      if (button.disabled) return;
      
      // Disable button and show loading
      button.disabled = true;
      const originalText = button.textContent;
      button.textContent = 'Processing...';
      const loadingDiv = button.nextElementSibling;
      loadingDiv.style.display = 'block';
      
      try {
        const response = await fetch('/minecraft/subscription/purchase', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Idempotency-Key': generateIdempotencyKey()
          },
          body: JSON.stringify({ plan_id: planId })
        });
        
        const result = await response.json();
        
        if (result.success) {
          // Show success message with formatted amounts
          const finalPriceFormatted = formatVV(result.final_price);
          alert(`Subscription purchased successfully for ${finalPriceFormatted} VV! You will receive your role shortly.`);
          
          // Reload page to update balance
          window.location.reload();
        } else {
          throw new Error(result.error || 'Purchase failed');
        }
      } catch (error) {
        console.error('Purchase error:', error);
        alert('Purchase failed: ' + error.message);
        
        // Re-enable button
        button.disabled = false;
        button.textContent = originalText;
        loadingDiv.style.display = 'none';
      }
    }
    
    // Prevent double-clicks and add enhanced UX
    document.addEventListener('DOMContentLoaded', function() {
      const buttons = document.querySelectorAll('.purchase-btn');
      buttons.forEach(button => {
        button.addEventListener('click', function(e) {
          if (this.disabled) {
            e.preventDefault();
            return false;
          }
        });
      });

      // Add hover effects for price displays
      const priceElements = document.querySelectorAll('.final-price');
      priceElements.forEach(price => {
        price.addEventListener('mouseenter', function() {
          this.style.transform = 'scale(1.05)';
          this.style.transition = 'transform 0.2s ease';
        });
        
        price.addEventListener('mouseleave', function() {
          this.style.transform = 'scale(1)';
        });
      });

      // Add glow effect on card hover
      const planCards = document.querySelectorAll('.plan-card');
      planCards.forEach(card => {
        card.addEventListener('mouseenter', function() {
          this.style.boxShadow = '0 20px 40px rgba(255, 156, 0, 0.4), 0 0 0 1px rgba(255, 156, 0, 0.3)';
        });
        
        card.addEventListener('mouseleave', function() {
          this.style.boxShadow = '';
        });
      });
    });

    // Add copy-to-clipboard functionality for balance
    document.querySelector('.balance-amount').addEventListener('click', function() {
      const balanceText = this.textContent.replace(' VV', '');
      navigator.clipboard.writeText(balanceText).then(function() {
        const balanceInfo = document.querySelector('.balance-info');
        const originalBorder = balanceInfo.style.borderColor;
        balanceInfo.style.borderColor = '#FFD84A';
        balanceInfo.style.boxShadow = '0 8px 32px rgba(255, 216, 74, 0.4)';
        setTimeout(function() {
          balanceInfo.style.borderColor = originalBorder;
          balanceInfo.style.boxShadow = '0 8px 32px rgba(255, 156, 0, 0.2)';
        }, 1000);
      });
    });
  </script>
</body>
</html> 